type: edu
files:
- name: banking/banking.py
  visible: true
  text: "import random\n\nusers = []\n\n\ndef add_user(card_number, pin):\n    users.append({\n\
    \        \"card_number\": card_number,\n        \"pin\": pin\n    })\n\n\ndef\
    \ get_user(card_number):\n    for i in range(len(users)):\n        if users[i]['card_number']\
    \ == card_number:\n            return users[i]\n    return None\n\n\ndef auth_user(card_number,\
    \ pin):\n    user = get_user(card_number)\n    return user and user['pin'] ==\
    \ pin\n\n\ndef create_a_card_number():\n    mii_bin = \"400000\"\n    account_identifier\
    \ = str(random.randint(1, 999999999)).zfill(9)\n    check_sum = \"8\"\n    return\
    \ mii_bin + account_identifier + check_sum\n\n\ndef create_a_pin():\n    return\
    \ str(random.randint(0, 9999)).zfill(4)\n\n\ndef create_an_account():\n    card_number\
    \ = create_a_card_number()\n    pin = create_a_pin()\n    add_user(card_number,\
    \ pin)\n\n    print(\"\")\n    print(\"Your card has been created\")\n    print(\"\
    Your card number:\")\n    print(card_number)\n    print(\"Your card PIN:\")\n\
    \    print(pin)\n    print(\"\")\n\n\ndef check_balance():\n    print(\"\")\n\
    \    print(\"Balance: 0\")\n    print(\"\")\n\n\ndef print_user_menu():\n    print(\"\
    1. Balance\")\n    print(\"2. Log out\")\n    print(\"0. Exit\")\n\n    choice\
    \ = int(input())\n\n    if choice == 1:\n        check_balance()\n    elif choice\
    \ == 2:\n        print(\"\")\n        print(\"You have successfully logged out!\"\
    )\n        print(\"\")\n        return False\n    else:\n        return -1\n \
    \   return True\n\n\ndef log_into_account():\n    print(\"Enter your card number:\"\
    )\n    card_number = input()\n    print(\"Enter your PIN:\")\n    pin = input()\n\
    \n    if auth_user(card_number, pin):\n        print(\"\")\n        print(\"You\
    \ have successfully logged in!\")\n        print(\"\")\n        while True:\n\
    \            result = print_user_menu()\n            if result == -1:\n      \
    \          return None\n            if not result:\n                break\n  \
    \  else:\n        print(\"\")\n        print(\"Wrong card number or PIN!\")\n\
    \        print(\"\")\n    \n    return True\n\n\ndef print_main_menu():\n    print(\"\
    1. Create an account\")\n    print(\"2. Log into account\")\n    print(\"0. Exit\"\
    )\n\n    choice = int(input())\n\n    if choice == 1:\n        create_an_account()\n\
    \    elif choice == 2:\n        result = log_into_account()\n        if result\
    \ is None:\n            return False\n    else:\n        print(\"Bye!\")\n   \
    \     return False\n    return True\n\n\nwhile True:\n    if not print_main_menu():\n\
    \        break\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 11),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/109/stages/592/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/109/stages/592/implement">JetBrains
    Academy</a>
  time: Tue, 11 Aug 2020 04:48:27 UTC
record: 2
